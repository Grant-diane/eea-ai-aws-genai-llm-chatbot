name: Deploy AWS GenAI LLM Chatbot

on:
  # Manual deployment trigger
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      knowledge_base_id:
        description: 'Knowledge Base ID (leave empty to use default: VKFD7RAQVO)'
        required: false
        default: 'VKFD7RAQVO'
        type: string
      knowledge_base_name:
        description: 'Knowledge Base Name (leave empty to use default: kb-ai-fellowship)'
        required: false
        default: 'kb-ai-fellowship'
        type: string
  
  # Automatic deployment on main branch (optional - uncomment if needed)
  push:
    branches: [main]

permissions:
  id-token: write   # Required for AWS OIDC
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment || 'dev' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          
      - name: Install dependencies and setup
        run: |
          npm ci
          npx @aws-amplify/cli codegen add --yes
          pip install -r pytest_requirements.txt || echo "No pytest requirements found"
          
      - name: Install frontend dependencies
        working-directory: ./lib/user-interface/react-app
        run: npm ci
        
      - name: Build project
        run: |
          mkdir -p /tmp/.cdk/cache
          npm run build
          
      - name: Run tests (optional)
        run: |
          npm run test && pytest tests/ || echo "Tests completed - continuing deployment"
          
      - name: Create configuration file
        run: |
          cat > bin/config.json << 'EOF'
          {
            "prefix": "eea-ai",
            "createCMKs": true,
            "retainOnDelete": true,
            "ddbDeletionProtection": true,
            "privateWebsite": false,
            "advancedMonitoring": true,
            "logRetention": 7,
            "rateLimitPerAIP": 400,
            "certificate": "",
            "domain": "",
            "cfGeoRestrictEnable": false,
            "cfGeoRestrictList": [],
            "bedrock": {
              "enabled": true,
              "region": "us-east-1",
              "guardrails": {
                "enabled": true,
                "identifier": "ai-fellowship",
                "version": "DRAFT"
              }
            },
            "llms": {
              "enableSagemakerModels": false,
              "rateLimitPerAIP": 100,
              "sagemaker": [],
              "huggingfaceApiSecretArn": ""
            },
            "rag": {
              "enabled": true,
              "deployDefaultSagemakerModels": false,
              "engines": {
                "aurora": {
                  "enabled": false
                },
                "opensearch": {
                  "enabled": false
                },
                "kendra": {
                  "enabled": false,
                  "createIndex": false,
                  "external": [],
                  "enterprise": false
                },
                "knowledgeBase": {
                  "enabled": true,
                  "external": [
                    {
                      "enabled": true,
                      "name": "kb-ai-fellowship-mep",
                      "knowledgeBaseId": "2FVNJEHXYE",
                      "region": "us-east-1"
                    }
                  ]
                }
              },
              "embeddingsModels": [
                {
                  "provider": "bedrock",
                  "name": "amazon.titan-embed-text-v1",
                  "dimensions": 1536,
                  "default": false
                },
                {
                  "provider": "bedrock",
                  "name": "amazon.titan-embed-image-v1",
                  "dimensions": 1024,
                  "default": false
                },
                {
                  "provider": "bedrock",
                  "name": "cohere.embed-english-v3",
                  "dimensions": 1024,
                  "default": false
                },
                {
                  "provider": "bedrock",
                  "name": "cohere.embed-multilingual-v3",
                  "dimensions": 1024,
                  "default": false
                },
                {
                  "provider": "openai",
                  "name": "text-embedding-ada-002",
                  "dimensions": 1536,
                  "default": false
                }
              ],
              "crossEncoderModels": []
            }
          }
          EOF
          echo "Configuration file created successfully"
          cat bin/config.json
          
      - name: Bootstrap CDK (if needed)
        run: |
          npm run cdk bootstrap aws://${{ secrets.AWS_ACCOUNT_ID }}/${{ secrets.AWS_REGION }} -- --require-approval never
          
      - name: Deploy to AWS
        run: |
          npm run deploy -- --require-approval never --progress events --outputs-file ./cdk-outputs.json --verbose --no-notices
          
      - name: Upload deployment outputs
        uses: actions/upload-artifact@v4
        with:
          name: cdk-outputs-${{ inputs.environment || 'dev' }}
          path: cdk-outputs.json
          retention-days: 30
          
      - name: Display deployment info
        run: |
          echo "Deployment completed successfully!"
          if [ -f cdk-outputs.json ]; then
            echo "Deployment outputs:"
            cat cdk-outputs.json
          fi
